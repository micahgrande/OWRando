{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["OWRando","_useState","useState","_useState2","Object","slicedToArray","Hero","setHero","Damage","Tank","Support","Heroes","concat","react_default","a","createElement","className","class","style","fontSize","backgroundColor","padding","color","borderRadius","margin","onClick","Math","floor","random","length","block","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA0EeA,MAvEf,WAAmB,IAAAC,EACKC,mBAAS,SADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACNI,EADMJ,EAAA,GAEXK,EAAS,CAAC,OAAQ,UAAW,WAAY,QAAS,QAAS,UAAW,SAAU,MAAO,SAAU,SAAU,cAAe,SAC9H,WAAY,WAAY,SAAU,cAC9BC,EAAO,CAAC,OAAQ,QAAS,YAAa,UAAW,UAAW,gBAAiB,SAC7EC,EAAU,CAAC,MAAO,WAAY,sBAAuB,WAAS,QAAS,QAAS,YAClFC,EAASH,EAAOI,OAAOH,EAAKG,OAAOF,IA+CvC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,OAAKE,MAAQ,WACXJ,EAAAC,EAAAC,cAAA,UAAQG,MAlDI,CAClBC,SAAU,OACVC,gBAAiB,UACjBC,QAAS,OACTC,MAAO,UACPC,aAAc,OACdC,OAAQ,QA4C4BC,QAjBrB,WACflB,EAAQC,EAAOkB,KAAKC,MAAMD,KAAKE,SAAWpB,EAAOqB,WAgBMC,OAAK,GAAtD,UACAjB,EAAAC,EAAAC,cAAA,UAAQG,MA3CE,CAChBC,SAAU,OACVC,gBAAiB,UACjBC,QAAS,OACTC,MAAO,UACPC,aAAc,OACdC,OAAQ,QAqC0BC,QAfrB,WACblB,EAAQE,EAAKiB,KAAKC,MAAMD,KAAKE,SAAWnB,EAAKoB,YAcvC,QACAhB,EAAAC,EAAAC,cAAA,UAAQG,MApCK,CACnBC,SAAU,OACVC,gBAAiB,UACjBC,QAAS,OACTC,MAAO,UACPC,aAAc,OACdC,OAAQ,QA8B6BC,QAbrB,WAChBlB,EAAQG,EAAQgB,KAAKC,MAAMD,KAAKE,SAAWlB,EAAQmB,YAY7C,YAEFhB,EAAAC,EAAAC,cAAA,UAAQG,MA9BO,CACnBC,SAAU,OACVC,gBAAiB,UACjBC,QAAS,OACTC,MAAO,UACPC,aAAc,OACdC,OAAQ,QAwB0BC,QAZnB,WACflB,EAAQI,EAAOe,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOkB,YAW7C,cACAhB,EAAAC,EAAAC,cAAA,4BAAoBT,MCtDRyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc65dab7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction OWRando() {\n  let [Hero, setHero] = useState(\"? ? ?\")\n  const Damage = [\"Ashe\", \"Bastion\", \"Doomfist\", \"Genji\", \"Hanzo\", \"Junkrat\", \"McCree\", \"Mei\", \"Pharah\", \"Reaper\", \"Soldier: 76\", \"Sombra\", \n    \"Symmetra\", \"Torbjorn\", \"Tracer\", \"Widowmaker\"]\n  const Tank = [\"D.Va\", \"Orisa\", \"Reinhardt\", \"Roadhog\", \"Winston\", \"Wrecking Ball\", \"Zarya\"]\n  const Support = [\"Ana\", \"Baptiste\", \"Don't Play Brigitte\", \"LÃºcio\", \"Mercy\", \"Moira\", \"Zenyatta\"]\nconst Heroes = Damage.concat(Tank.concat(Support))\n\n  const DamageStyle = {\n    fontSize: \"20px\",\n    backgroundColor: \"#E2A2FE\",\n    padding: \"15px\",\n    color: \"#e7e7e7\",\n    borderRadius: \"12px\",\n    margin: \"10px\"\n  }\n  const TankStyle = {\n    fontSize: \"20px\",\n    backgroundColor: \"#BBAFFD\",\n    padding: \"15px\",\n    color: \"#e7e7e7\",\n    borderRadius: \"12px\",\n    margin: \"10px\"\n  }\n  const SupportStyle = {\n    fontSize: \"20px\",\n    backgroundColor: \"#A2C5FE\",\n    padding: \"15px\",\n    color: \"#e7e7e7\",\n    borderRadius: \"12px\",\n    margin: \"10px\"\n  } \n   const HeroesStyle = {\n    fontSize: \"20px\",\n    backgroundColor: \"#A9CBE8\",\n    padding: \"15px\",\n    color: \"#e7e7e7\",\n    borderRadius: \"12px\",\n    margin: \"10px\"\n  }\n\n  const DoDamage = () => {\n    setHero(Damage[Math.floor(Math.random() * Damage.length)])\n  }\n  const DoTank = () => {\n    setHero(Tank[Math.floor(Math.random() * Tank.length)])\n  }\n  const DoSupport = () => {\n    setHero(Support[Math.floor(Math.random() * Support.length)])\n  }\n  const DoHeroes = () => {\n    setHero(Heroes[Math.floor(Math.random() * Heroes.length)])\n  }\n  return (\n    <div className=\"OWRando\">\n      <header className=\"App-header\">\n        <h1>Click a class to select a random hero!</h1>\n        <div class = \"buttons\">\n          <button style = {DamageStyle} onClick={DoDamage} block>DAMAGE</button>\n          <button style = {TankStyle} onClick={DoTank} >TANK</button>\n          <button style = {SupportStyle} onClick={DoSupport}>SUPPORT</button>\n        </div>\n        <button style = {HeroesStyle} onClick={DoHeroes}>ALL HEROES</button>\n        <h2>You are using: {Hero}</h2>\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default OWRando;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}